ylab = "weight",
main = "specifying point sizes and colors with a 3rd variable",
cex = pirates.r$tattoos /8,
col = gray(1 - pirates.r$tattoos/20))
grid
grid()
BeardLength
BeardLengths
aggregate(formula = Beard ~ Ship,
FUN = mean,
data = BeardLengths)
barplot(height = BeardLengths$Beard,
names.arg = BeardLengths$Ship,
xlab = "Ship",
ylab = "Beard Length",
main = "barplot of mean beard length by ship",
col = gray)
agg.beard <- aggregate(formula = Beard ~ Ship,
+           FUN = mean,
+           data = BeardLengths)
agg.beard <- aggregate(formula = Beard ~ Ship,
FUN = mean,
data = BeardLengths)
barplot(height = agg.beard$Beard,
names.arg = agg.beard$Ship,
xlab = "Ship",
ylab = "Beard Length",
main = "barplot of mean beard length by ship",
col = gray)
barplot(height = agg.beard$Beard,
names.arg = agg.beard$Ship,xlab = "Ship",
+         ylab = "Beard Length",
+         main = "barplot of mean beard length by ship",
+         col = gray)
barplot(height = agg.beard$Beard,
names.arg = agg.beard$Ship,
xlab = "Ship",
ylab = "Beard Length",
main = "barplot of mean beard length by ship",
col = gray,
bg = gray)
pirateplot(formula = Beard ~ Ship,
data = agg.beard<)
pirateplot(formula = Beard ~ Ship,
data = agg.beard,
main = "pirateplot of beard lengths by ship",
xlab ="Ship",
ylab = "Beard")
pirateplot(formula = Beard ~ Ship,
data = agg.beard,
main = "pirateplot of beard lengths by ship",
xlab ="Ship",
ylab = "Beard",
ylim = c(0,50))
pirateplot(formula = Beard ~ Ship,
data = BeardLengths,
main = "pirateplot of beard lengths by ship",
xlab ="Ship",
ylab = "Beard",
ylim = c(0,50))
head(pirates)
plot(x = pirates$age,
y = pirates$parrots)
plot(x = pirates$age,
y = pirates$parrots,
type = "p",
main = "pirate age and number of parrots owned",
xlab = "age",
ylab = "parrots",
xlim = c(10,45),
ylim = c(0,25),
col = gray(level = .5, alpha = .1),
pch = 16)
install.package('RColorBrewer')
library('RColorBrewer')
library("RColorBrewer")
install.packages('RColorBrewer')
library("MyRProject.Rproj")
library("RColorBrewer")
display.brewer.all()
install.packages('circlize')
library("circlize")
smoking.colors <- circlize::colorRamp2(breaks = c(0, 15, 25),
colors = c("blue", "green", "red"),
transparency = .2)
plot(1, xlim = c(-.5, 31.5), ylim = c(0, .3),
type ="n", xlab = "cig packs",
yaxt = "n", ylab = "", bty = "n",
main = "col")
segments(x0 = c(0, 15, 30),
y0 = rep(0,3),
x1 = c(0, 15, 30),
y1 = rep(.1,3),
lty = 2)
points(x = 0:30,
y = rep(.1,31), pch = 16,
col = smoking.colors(0:30))
drinks <- round(rnorm(100, mean = 10, sd  = 4), 2)
drinks
smokes <- drinks + rnoorm(100, mean = 5, sd = 2)
smokes <- drinks + rnorm(100, mean = 5, sd = 2)
smokes
par(mfrow = c(2,2))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
american.bp <- c(3, 5, 2, 1, 4, 4, 6, 3, 5, 4)
european.bp <- c(6, 5, 7, 7, 6, 3, 4, 6, 5, 4)
bp.survey <- data.frame("bp" = c(american.bp, european.bp),
"group" = rep(c("American", "European"), each = 10),
stringsAsFactors = FALSE)
bp.survey
beard.t <- t.test(formula = beard.length ~ sex,
subset = sex %in%c("male", "female"),
data = pirates)
beard.t
apa(beard.t)
name(pirates)
names(pirates)
df <- subset(pirates, fav.pixar %in% c("Up", "Inside Out))
df
df <- subset(pirates, fav.pixar %in% c("Up", "Inside Out))
df <- subset(pirates, fav.pixar %in% c("Up", "Inside Out"))
df
names(df)
movie.table <- table(df$fav.pixar, df$eyepatch)
movie.table
movie.chi <- chisq.test(movie.table)
movie.chi
names(movies)
movie.cor <- cor.test(formula = ~budget+time,
data = movies)
apa(movie.cor)
movie.rate <- t.test(formula = revenue.all ~ rating,
subset = rating%in%c("R", "PG-13"),
data = movies)
apa(movie.rate)
genre.table <- table(movies$genere)
genere.tab;e
genere.table
genre.table
genre.table <- table(movies$genre)
genre.table
movie.chi <- chisq.test(genre.table)
apa(movie.chi)
names(movies)
seq.table <- table(movies$genre, movies$sequel)
seq.table
seq.chi <- chisq(seq.table)
seq.chi <- chisq.test(seq.table)
seq.table
seq.movie <- chisq.test(sq.table)
seq.movie <- chisq.test(seq.table)
sqsq.table <- seq.table +20
seq.movie <- chisq.test(sq.sq.table)
seq.movie <- chisq.test(sqsq.table)
apa(seq.movie)
library(lme4)
install.packages("lme4")
pix.aov <- aov(formula = tattoos ~ fav.pixar,
data = pirates)
summary(pix.aov)
fav.aov <- aov(formula = tattoos ~ favorite.pirates,
data = pirates)
fav.aov <- aov(formula = tattoos ~ favorite.pirate,
data = pirates)
summary(fav.aov)
both.aov <- aov(formula = tattoos ~ favorite.pirate + fav.pixar,
data = pirates)
summary(both.aov)
both.aov <- aov(formula = tattoos ~ favorite.pirate * fav.pixar,
data = pirates)
summary(both.aov)
names(auction)
jbb.cannon.lm <- lm(formula = jbb ~ cannons,
data = auction)
summary(jbb.cannon.lm)
jbb.cannon.lm <- lm(formula = jbb ~ cannons,
data = subset(auction, style == "modern")
jbb.cannon.lm <- lm(formula = jbb ~ cannons,
data = subset(auction, style == "modern"))
jbb.cannon.lm <- lm(formula = jbb ~ cannons,
data = subset(auction, style == "modern"))
jbb.cannon.modern.lm <- lm(formula = jbb ~ cannons,
data = subset(auction, style == "modern"))
jbb.cannon.classic.lm <- lm(formula = jbb ~ cannons,
data = subset(auction, style == "classic"))
summary(jbb.cannon.classic.lm)$coefficients
summary(jbb.cannon.modern.lm)$coefficients
jbb.style.age.lm <- lm(formula =  jbb~ style*age,
data = auction)
summary(jbb.style.age.lm)$coefficients
jbb.all.lm <- lm(jbb ~ cannons + rooms + age + condition + color + style,
data = auction)
summary(jbb.all.lm)$coefficient
summary(jbb.all.lm)Â¥
summary(jbb.all.lm)
price.all.lm <- lm(formula = price ~ cannons + rooms + age + condition + color + style,
data = auction)
summary(price.all.lm)
auction$price.gt.3500 <- auction$price > 3500
price.all.lm <- lm(formula = price.gt.3500 ~ cannons + rooms + age + condition + color + style,
data = auction,
family = bimodal)
price.all.lm <- lm(formula = price.gt.3500 ~ cannons + rooms + age + condition + color + style,
data = auction,
family = binominal)
price.all.lm <- lm(formula = price.gt.3500 ~ cannons + rooms + age + condition + color + style,
data = auction,
family = binomial)
price.all.lm <- glm(formula = price.gt.3500 ~ cannons + rooms + age + condition + color + style,
data = auction,
family = binomial)
summary(price.all.lm)
price.all.lm <- lm(formula = price ~ cannons + rooms + age + condition + color + style,
data = auction)
new.ships <- data.frame(cannons = c(12, 8, 32),
rooms = c(34, 26, 65),
age = c(43, 54, 100),
condition = c(7, 3, 5),
color = c("black", "black", "red"),
style = c("classic", "modern", "modern"),
stringAsFactors = FALSE)
predict(object = price.all.lm,
newdata = new.ships)
price.all.lm <- glm(formula = price.gt.3500 ~ cannons + rooms + age + condition + color + style,
data = auction,
family = binomial)
log.pred <- predict(object = price.all.lm,
newdata = new.ships)
1/(1 + exp(-log.pred))
transoarebt
transparent
Jacks.Equation(a = 1000, b = 30, c = 7)
Jacks.Equation(a = 1000, b = 30, c = 7)
source(MyCodes)
Is(MyCodes.R)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
Jacks.Equation(a = 1000, b = 30, c = 7)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
standardize.me(c(1, 2, 1, 100))
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
recode.numeric(x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
recode.numeric(x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10)
x
x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10
x = c(5, 3, -5, 4, 3, 97)
lb = 0
ub = 10
x<lb
(x<lb | x.ub)
(x<lb | x>ub)
if (x<lb | x>ub){x = "NA"}
if (x<lb | x>ub){"TRUE" = "NA"}
if (x<lb | x>ub){x[] = "NA"}
? if
?if
?if
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10
recode.numeric(x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
recode.numeric(x = c(5, 3, -5, 4, 3, 97),
lb = 0,
ub = 10)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
plot.advanced(x = diamonds$weight,
y = diamonds$value,
add.regression = TRUE,
add.means = TRUE,
add.test = TRUE)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
plot.advanced(x = diamonds$weight,
y = diamonds$value,
add.regression = TRUE,
add.means = TRUE,
add.test = TRUE)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
plot.advanced(x = diamonds$weight,
y = diamonds$value,
add.regression = TRUE,
add.means = TRUE,
add.test = TRUE)
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
plot.advanced(x = diamonds$weight,
y = diamonds$value,
add.regression = TRUE,
add.means = TRUE,
add.test = TRUE)
par(mfrow = c(1, 1))
samples.ls <- vector("list", 5)
sample.ls
samples.ls
names(ChickWeight)
ChickWeight$Time
par(mfrow =c(2,2))
loop.vec <- 1:4
loop.vec <- c(0, 2, 4, 6)
ChickWeight$weight [ChickWeight$Time == 0 ]
par(mfrow = c(2,2))
loop.vec <- c(0, 2, 4, 6)
for(i in loop.vec){
x = ChickWeight$weight [ChickWeight$Time == i ]
hist(x,
main = paster("Time", i))
w
222
par(mfrow = c(2,2))
loop.vec <- c(0, 2, 4, 6)
for(i in loop.vec){
x = ChickWeight$weight [ChickWeight$Time == i ]
hist(x,
main = paster("Time", i))}
vlv
clc
delete
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
d
source('~/Documents/UCL_2nd_sem/MasterResearch/MyRProject/R/MyCodes.R')
par(mfrow = c(2,2))
loop.vec <- c(0, 2, 4, 6)
for(i in loop.vec){
x = ChickWeight$weight [ChickWeight$Time == i ]
hist(x,
main = paster("Time", i))}
par(mfrow = c(2,2))
loop.vec <- c(0, 2, 4, 6)
for(i in loop.vec){
x = ChickWeight$weight [ChickWeight$Time == i ]
hist(x,
main = paster("Time", i))}
par(mfrow = c(2,2))
loop.vec <- c(0, 2, 4, 6)
for(i in loop.vec){
x = ChickWeight$weight [ChickWeight$Time == i ]
hist(x,
main = paste("Time", i))}
survey <- data.frame("q1" = c(5, 3, 2, 7, 11, 5),
"q2" = c(4, 2, 2, 5, 5, 2),
"q3" = c(2, 1, 4, 2, 9, 10),
"q4" = c(2, 5, 2, 5, 4, 2),
"q5" = c(1, 4, -20, 2, 4, 2))
survey
survey[,1]
x = survey[,1]
x
x[x>5]
x[x>5]=NA
x
for(i in 1:5){
x <- survey[,i]
x[x>5] = NA
survey.clean[i] <- x
}
survey
survey.clearn <- survey
for(i in 1:5){
x <- survey[,i]
x[x>5] = NA
survey.clean[i] <- x
}
survey.clearn <- survey
for(i in 1:5){
x <- survey[,i]
x[x>5] = NA
survey.clean[i] <- x
}
survey.clean <- survey
for(i in 1:5){
x <- survey[,i]
x[x>5] = NA
survey.clean[i] <- x
}
survey.clean
?is.na
is.na(survey.clean)
x = is.na(survey.clean)
sum(x)
survey.clean$invalid.answer <- rep(NA, 5)
survey.clean$invalid.answer <- rep(NA, 6)
survey.clean
is.na(survey.clean[1])
is.na(survey.clean[,1])
survey.clean
is.na(survey.clean)
is.na(survey.clean[,1])
is.na(survey.clean[1])
is.na(survey.clean[1,~])
is.na(survey.clean[~,1])
is.na(survey.clean:,1])
is.na(survey.clean{:,1])
is.na(survey.clean[:,1])
survey
survey[1]
survey.clean <- survey
for(i in 1:5){
x <- survey[i]
x[x>5| x<1] = NA
survey.clean[i] <- x
]
survey.clean <- survey
for(i in 1:5){
x <- survey[i]
x[x>5| x<1] = NA
survey.clean[i] <- x
}
survey
survey.clean
survey[1,:]
survey[,1]
survey[1,]
is.na(survey.clean[1,])
survey.clean$invalid.answer <- rep(0, 6)
for(i in 1:6){
Nah <- is.na(survey.clean[i,])
CountNah <- sum(Nah)
survey.clean$invalid.answer[i] <-CountNah
}
survey.clean
survey.B <- data.frame("q1" = c(5, 3, 2, 7, 1, 9),
"q2" = c(4, 2, 2, 5, 1, 10),
"q3" = c(2, 1, 4, 2, 9, 10),
"q4" = c(10, 5, 2, 10, 4, 2),
"q5" = c(4, 4, 3, 2, 4, 2))
x = survey.B[1,]
x
output <- (x - mean(x))/sd(x)
mean(x)
x
mean(x)
x[1]
mean(x[1])
x = survey.B[1]
x
mean(x)
mean(x$q1)
x
(x - mean(x$q1))/sd(x$q1)
survey.B.z <- survey.B
for(i in c("q1", "q2", "q3", "q4", "q5")){
x = survey.B.z[i]
output <- (x - mean(x$i))/sd(x$i)
survey.B.z[1] <- output
}
for(i in c(q1, q2, q3, q4, q5)){
x = survey.B.z[i]
output <- (x - mean(x$i))/sd(x$i)
survey.B.z[1] <- output
}
x
mean(x)
mean(x$1)
mean(x$q5)
mean(x$5)
paste("q",1)
v <- paste("q",5)
mean(x$v)
v
survey.B[1]
a <- survey.B[,1]
a
mean(a)
survey.B.z <- survey.B
for(i in 1:5){
x = survey.B.z[,i]
output <- (x - mean(x))/sd(x)
survey.B.z[1] <- output
}
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
survey.B.z
survey.B[1,]
x <-survey.B[1,]
x[,1]
x
survey.B.z <- survey.B
for(i in 1:5){
x = survey.B.z[,i]
output <- (x - mean(x))/sd(x)
survey.B.z[i] <- output
}
survey.B.z
mean(mtcars$mpg)
#17-4
survey.B.z <- survey.B
install.packages("devtools")
install.packages("KernSmooth")
sessionInfo
sessionInfo()
load(KernSmooth)
library(KernSmooth)
